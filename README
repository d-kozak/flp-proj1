# RKA 2 DKA
Autor: David Kozak
Contact: dkozak94@gmail.com
Year: 2017/2018

Projekt implementuje determinizaci rozsirenych konecnych automatu tak, jak byla popsana v zadani. 
Pomoci prepinace -i je mozne automat pouze nacist a vypsat.
Pomoci prepinace -t zapnete determinizaci
Pokud neni nastaven zadny prepinac, program nic neudela.

Program ocekava, ze na vstupu je syntakticky i semanticky korektni rozsireny automat. 

Rozsireni:
a) Program je schopny zpracovat i automaty, jejichz stavy a symboly jsou retezce. Pri vypisovani ale dochazi ke precislovani stavu 
b) Dale je tez mozne jednim spustenim zahajit zpracovani nekolika automatu, viz ./rka-2-tka -i input1 -t input2 -t input3 -i // tento posledni bude nacteny ze standardniho vstupu
    Nanestesti ale neni mozne v tomto pripade nacitat vice nez jeden automat ze standardniho vstupu, nebot funkce getContents neni reentrantni
c) pridan prepinac -e, ktery zapina pouze odstraneni epsilon prechodu bez nasledne determinizace
d) v adresari test naleznete unit testy tohoto projektu
    pro jejich spusteni je potreba mit nainslatovanou knihovnu hunit a idelne i nastroj haskell tool stack, ktery byl pri vyvoji projektu pouzit
e) pridan prepinac -d, pri kterem:
    Vystupni format je lehce upraven, aby reflektoval fakt, ze nove vznikle stavy jsou casto makrostavy slozene z nekolika stavu puvodniho automatu. Proto je kazdy stav vypsan jako mnozina. Vystupni format muze vypadat napriklad nasledovne, coz umoznuje rychlejsi manualni verifikaci:
    {0,1},{0},{2}
    0
    {2}
    {0,1},a,{0,1}
    {0,1},b,{2}
    {0},a,{0,1}
    {0},b,{2}
    Toto sice presne neodpovida tomu, co bylo specifikovano v zadani, ale dle meho nazoru mnohem srozumitelneji zobrazuje vysledny automat